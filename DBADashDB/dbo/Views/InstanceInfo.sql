CREATE VIEW dbo.InstanceInfo
AS
SELECT I.InstanceID,
	I.Instance,
	I.ConnectionID,
    I.MachineName,
	I.ComputerNamePhysicalNetBIOS,
	I.ServerName,
	I.InstanceName,
	I.ActivePowerPlanGUID,
    I.ActivePowerPlan,
    I.ProcessorNameString,
    I.SystemManufacturer,
    I.SystemProductName,
	I.physical_memory_kb,
	I.physical_memory_kb/POWER(1024.0,2) PhysicalMemoryGB,
	CAST(maxmem.value AS BIGINT) BufferPoolMB, 
	CASE WHEN CAST(maxmem.value AS BIGINT)*1024 > I.physical_memory_kb THEN 1.0 ELSE CAST(maxmem.value AS BIGINT) / (I.physical_memory_kb/1024.0) END AS  PctMemoryAllocatedToBufferPool,
	CASE WHEN CAST(maxmem.value AS BIGINT)*1024 > I.physical_memory_kb THEN 0.0 ELSE ((I.physical_memory_kb/1024)-CAST(maxmem.value AS BIGINT)) / 1024.0 END AS MemoryNotAllocatedToBufferPoolGB,
    I.sql_memory_model,	  
   	CASE I.sql_memory_model WHEN 1 THEN 'CONVENTIONAL' WHEN 2 THEN 'LOCK_PAGES' WHEN 3 THEN 'LARGE_PAGES' ELSE NULL END AS sql_memory_model_desc,
	I.OfflineSchedulers,
    I.affinity_type,
	CASE I.affinity_type WHEN 1 THEN 'MANUAL' WHEN 2 THEN 'AUTO' ELSE NULL END AS affinity_type_desc,
    I.cores_per_socket,
	I.socket_count,
	I.cores_per_socket*I.socket_count AS cpu_core_count,
	I.cpu_count/I.hyperthread_ratio AS physical_cpu_count,
    I.cpu_count,
    I.hyperthread_ratio,
	I.numa_node_count,
    I.softnuma_configuration,
	CASE I.softnuma_configuration WHEN 0 THEN 'OFF' WHEN 1 THEN 'ON' WHEN 2 THEN 'MANUAL' ELSE NULL END AS softnuma_configuration_desc,
    I.ms_ticks,
	I.ms_ticks/60000 host_up_time_mins,
	DATEADD(s,-I.ms_ticks/1000,os.SnapshotDate) AS host_start_time,
	I.sqlserver_start_time,
    I.os_priority_class,
	CASE I.os_priority_class WHEN 32 THEN 'NORMAL' WHEN 128 THEN 'HIGH' ELSE NULL END AS os_priority_class_desc,
    I.max_workers_count,
    I.scheduler_count,
    I.BuildClrVersion,
	I.LicenseType,
    I.NumLicenses,
    I.ProductBuild,
    I.ProductBuildType,
    I.ProductLevel,
    I.ProductMajorVersion,
    I.ProductUpdateLevel,
    I.ProductUpdateReference,
    I.ProductVersion,
	I.Edition,
    I.EditionID,
    I.EngineEdition,
	I.ResourceLastUpdateDateTime,
    I.ResourceVersion,
	v.SQLVersionName + ' ' + ISNULL(I.Edition + ' ','') + 
						ISNULL(I.ProductLevel + ' ','') + ISNULL(I.ProductUpdateLevel,'') AS SQLVersion,
    I.Collation,
    I.CollationID,
    I.ComparisonStyle,
	I.LCID,
    I.SqlCharSet,
    I.SqlCharSetName,
    I.SqlSortOrder,
    I.SqlSortOrderName,
    I.FileStreamConfiguredLevel,
    I.FileStreamEffectiveLevel,
    I.FileStreamShareName,
    I.HadrManagerStatus,
    I.InstanceDefaultDataPath,
    I.InstanceDefaultLogPath,
    I.IsAdvancedAnalyticsInstalled,
    I.IsClustered,
    I.IsFullTextInstalled,
    I.IsHadrEnabled,
    I.IsIntegratedSecurityOnly,
    I.IsLocalDB,
    I.IsPolybaseInstalled,
    I.IsXTPSupported,
    I.IsAgentRunning,
    I.InstantFileInitializationEnabled,
    A.AgentHostName,
	I.WindowsCaption,
	I.host_platform,
	I.host_distribution,
	I.host_release,
	I.host_service_pack_level,
	I.host_sku,
    I.os_language_version,
	I.host_sku as WindowsSKU,
    I.host_service_pack_level as WindowsSP,
    I.host_release as WindowsRelease,
	I.IsActive,
	DATEDIFF(mi,DATEADD(mi,I.UTCOffset,I.sqlserver_start_time),os.SnapshotDate) AS sqlserver_uptime,
	CASE WHEN tDB.value_in_use=1 AND tDB.value=1 THEN CAST(1 AS BIT) WHEN tDB.configuration_id=1589 THEN CAST(0 AS BIT) ELSE NULL END AS IsTempDBMetadataMemoryOptimized,
	CASE WHEN I.EditionID=1674378470 -- AzureDB or Azure Managed Instance
            THEN 150 ELSE TRY_CAST(I.ProductMajorVersion AS INT)*10 END AS MaxSupportedCompatibilityLevel,
    I.InstanceDisplayName
FROM dbo.Instances I
LEFT JOIN dbo.DBADashAgent A ON I.CollectAgentID = A.DBADashAgentID
CROSS APPLY dbo.SQLVersionName(I.EditionID,I.ProductVersion) v
LEFT JOIN dbo.SysConfig maxmem ON maxmem.InstanceID = I.InstanceID AND maxmem.configuration_id=1544 
LEFT JOIN dbo.CollectionDates os ON os.InstanceID = I.InstanceID AND os.Reference='OSInfo'
LEFT JOIN dbo.SysConfig tDB ON tDB.InstanceID = i.InstanceID AND tDB.configuration_id=1589